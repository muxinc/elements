{"version":3,"file":"static/js/144.d8b151c8.chunk.js","mappings":"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","sources":["../../../packages/mux-player-react/src/common/utils.ts","../../../packages/mux-player-react/src/useObjectPropEffect.ts","../../../packages/mux-player-react/src/env.ts","../../../packages/mux-player-react/src/index.tsx","../../../packages/mux-player-react/src/useCombinedRefs.ts"],"sourcesContent":["import React from 'react';\n\n// React 19 supports custom elements and setting properties directly on them,\n// older React versions converted all props to attributes on custom elments.\n// Boolean `true` values should not be converted to empty strings in React 19+\n// because that would result in a `false` value if it was set via a property.\n// React 19+ handles primitive values correctly but we still need to convert\n// the camelCase prop names to kebab-case attribute names for mux-player. (WL)\n\nconst IS_REACT_19_OR_NEWER = parseInt(React.version) >= 19;\n\n// NOTE: As a forward-looking implementation, we may want to assume\n// prop names -> attribute names is always a simple name.toLowerCase()\n// and provide a mechanism for passing in per-component overrides for\n// e.g. kebab cases, as that's the way React/Preact handles these. (CJP)\nconst ReactPropToAttrNameMap = {\n  className: 'class',\n  classname: 'class',\n  htmlFor: 'for',\n  crossOrigin: 'crossorigin',\n  viewBox: 'viewBox',\n  playsInline: 'playsinline',\n  autoPlay: 'autoplay',\n  playbackRate: 'playbackrate',\n};\n\ntype KeyTypes = string | number | symbol;\ntype Maybe<T> = T | null | undefined;\n\nexport const isNil = (x: unknown): x is null | undefined => x == undefined;\n\n// Type Guard to determine if a given key is actually a key of some object of type T\nexport const isKeyOf = <T extends object = any>(k: KeyTypes, o: Maybe<T>): k is keyof T => {\n  if (isNil(o)) return false;\n  return k in o;\n};\n\nconst toKebabCase = (string: string) => string.replace(/[A-Z]/g, (match) => `-${match.toLowerCase()}`);\n\nexport const toNativeAttrName = (propName: string, propValue: any): string | undefined => {\n  if (!IS_REACT_19_OR_NEWER && typeof propValue === 'boolean' && !propValue) return undefined;\n  if (isKeyOf(propName, ReactPropToAttrNameMap)) return ReactPropToAttrNameMap[propName];\n  if (typeof propValue === 'undefined') return undefined;\n  if (/[A-Z]/.test(propName)) return toKebabCase(propName);\n  return propName;\n};\nexport const toStyleAttr = <T>(x: T) => x;\n\nexport const toNativeAttrValue = (propValue: any, _propName: string) => {\n  if (!IS_REACT_19_OR_NEWER && typeof propValue === 'boolean') return '';\n  return propValue;\n};\n\nexport const toNativeProps = (props = {}) => {\n  return Object.entries(props).reduce<{ [k: string]: string }>((transformedProps, [propName, propValue]) => {\n    const attrName = toNativeAttrName(propName, propValue);\n\n    // prop was stripped. Don't add.\n    if (!attrName) {\n      return transformedProps;\n    }\n\n    const attrValue = toNativeAttrValue(propValue, propName);\n    transformedProps[attrName] = attrValue;\n    return transformedProps;\n  }, {});\n};\n","import { useEffect } from 'react';\n\nconst hasOwnProperty = Object.prototype.hasOwnProperty;\n\n/**\n * Slightly modified version of React's shallowEqual, with optimizations for Arrays\n * so we may treat them specifically as unequal if they are not a) both arrays\n * or b) don't contain the same (shallowly compared) elements.\n */\nconst shallowEqual = (objA: any, objB: any): boolean => {\n  if (Object.is(objA, objB)) {\n    return true;\n  }\n\n  if (typeof objA !== 'object' || objA === null || typeof objB !== 'object' || objB === null) {\n    return false;\n  }\n\n  if (Array.isArray(objA)) {\n    // Early \"cheap\" array compares\n    if (!Array.isArray(objB) || objA.length !== objB.length) return false;\n    // Shallow compare for arrays\n    return objA.some((vVal, i) => objB[i] === vVal);\n  }\n\n  const keysA = Object.keys(objA);\n  const keysB = Object.keys(objB);\n\n  if (keysA.length !== keysB.length) {\n    return false;\n  }\n\n  // Test for A's keys different from B.\n  for (let i = 0; i < keysA.length; i++) {\n    if (!hasOwnProperty.call(objB, keysA[i]) || !Object.is(objA[keysA[i]], objB[keysA[i]])) {\n      return false;\n    }\n  }\n\n  return true;\n};\n\nexport const defaultHasChanged = (obj: any, v: any, k: string) => {\n  return !shallowEqual(v, obj[k]);\n};\n\nconst defaultUpdateValue = (obj: any, v: any, k: string) => {\n  obj[k] = v;\n};\n\nexport const useObjectPropEffect = <T extends { [k: string]: any }, V>(\n  propName: string,\n  propValue: V | null | undefined,\n  ref: React.MutableRefObject<T | null> | null | undefined,\n  updateValue = defaultUpdateValue,\n  hasChanged = defaultHasChanged\n) => {\n  return useEffect(() => {\n    const obj = ref?.current;\n    if (!obj) return;\n    if (!hasChanged(obj, propValue, propName)) return;\n    updateValue(obj, propValue, propName);\n  }, [ref?.current, propValue]);\n};\n\nexport default useObjectPropEffect;\n","const getEnvPlayerVersion = () => {\n  try {\n    // @ts-ignore\n    return PLAYER_VERSION as string;\n  } catch {}\n  return 'UNKNOWN';\n};\n\nconst player_version: string = getEnvPlayerVersion();\n\nexport const getPlayerVersion = () => player_version;\n","'use client';\nimport React, { useEffect, useState } from 'react';\nimport type { CSSProperties } from 'react';\nimport type {\n  StreamTypes,\n  PlaybackTypes,\n  CmcdTypes,\n  MaxResolutionValue,\n  MinResolutionValue,\n  RenditionOrderValue,\n} from '@mux/playback-core';\nimport { MaxResolution, MinResolution, RenditionOrder, generatePlayerInitTime } from '@mux/playback-core';\nimport { MediaError } from '@mux/mux-player';\nimport type MuxPlayerElement from '@mux/mux-player';\nimport type { Tokens, MuxPlayerElementEventMap } from '@mux/mux-player';\nimport { toNativeProps } from './common/utils';\nimport { useRef } from 'react';\nimport { useCombinedRefs } from './useCombinedRefs';\nimport useObjectPropEffect, { defaultHasChanged } from './useObjectPropEffect';\nimport { getPlayerVersion } from './env';\n\nexport { MediaError, MaxResolution, MinResolution, RenditionOrder, generatePlayerInitTime };\n\ntype ValueOf<T> = T[keyof T];\ninterface GenericEventListener<T extends Event = CustomEvent> {\n  (evt: T): void;\n}\n\nexport type MuxPlayerRefAttributes = MuxPlayerElement;\ntype VideoApiAttributes = {\n  currentTime: number;\n  volume: number;\n  paused: boolean;\n  src: string | null;\n  poster: string;\n  playbackRate: number;\n  playsInline: boolean;\n  preload: string;\n  crossOrigin: string;\n  autoPlay: boolean | string;\n  loop: boolean;\n  muted: boolean;\n  style: CSSProperties;\n};\n\ntype MuxMediaPropTypes = {\n  audio: boolean;\n  //  envKey: Options[\"data\"][\"env_key\"];\n  envKey: string;\n  // debug: Options[\"debug\"] & Hls[\"config\"][\"debug\"];\n  debug: boolean;\n  disableTracking: boolean;\n  disableCookies: boolean;\n  disablePictureInPicture?: boolean;\n  // metadata: Partial<Options[\"data\"]>;\n  metadata: { [k: string]: any };\n  extraSourceParams: Record<string, any>;\n  _hlsConfig: MuxPlayerElement['_hlsConfig'];\n  beaconCollectionDomain: string;\n  customDomain: string;\n  playbackId: string;\n  preferPlayback: ValueOf<PlaybackTypes> | undefined;\n  // NOTE: Explicitly adding deprecated values here for now to avoid fully breaking changes in TS envs (CJP)\n  streamType: ValueOf<StreamTypes> | 'll-live' | 'live:dvr' | 'll-live:dvr';\n  defaultStreamType: ValueOf<StreamTypes>;\n  targetLiveWindow: number;\n  startTime: number;\n  storyboardSrc: string;\n  preferCmcd: ValueOf<CmcdTypes> | undefined;\n  children?: React.ReactNode;\n};\n\nexport type MuxPlayerProps = {\n  className?: string;\n  hotkeys?: string;\n  nohotkeys?: boolean;\n  castReceiver?: string | undefined;\n  castCustomData?: Record<string, any> | undefined;\n  defaultHiddenCaptions?: boolean;\n  playerSoftwareVersion?: string;\n  playerSoftwareName?: string;\n  playerInitTime?: number;\n  forwardSeekOffset?: number;\n  backwardSeekOffset?: number;\n  maxResolution?: MaxResolutionValue;\n  minResolution?: MinResolutionValue;\n  renditionOrder?: RenditionOrderValue;\n  programStartTime?: number;\n  programEndTime?: number;\n  proudlyDisplayMuxBadge?: boolean;\n  assetStartTime?: number;\n  assetEndTime?: number;\n  metadataVideoId?: string;\n  metadataVideoTitle?: string;\n  metadataViewerUserId?: string;\n  primaryColor?: string;\n  secondaryColor?: string;\n  accentColor?: string;\n  placeholder?: string;\n  playbackRates?: number[];\n  defaultShowRemainingTime?: boolean;\n  defaultDuration?: number;\n  noVolumePref?: boolean;\n  thumbnailTime?: number;\n  title?: string;\n  tokens?: Tokens;\n  theme?: string;\n  themeProps?: { [k: string]: any };\n  onAbort?: GenericEventListener<MuxPlayerElementEventMap['abort']>;\n  onCanPlay?: GenericEventListener<MuxPlayerElementEventMap['canplay']>;\n  onCanPlayThrough?: GenericEventListener<MuxPlayerElementEventMap['canplaythrough']>;\n  onEmptied?: GenericEventListener<MuxPlayerElementEventMap['emptied']>;\n  onLoadStart?: GenericEventListener<MuxPlayerElementEventMap['loadstart']>;\n  onLoadedData?: GenericEventListener<MuxPlayerElementEventMap['loadeddata']>;\n  onLoadedMetadata?: GenericEventListener<MuxPlayerElementEventMap['loadedmetadata']>;\n  onProgress?: GenericEventListener<MuxPlayerElementEventMap['progress']>;\n  onDurationChange?: GenericEventListener<MuxPlayerElementEventMap['durationchange']>;\n  onVolumeChange?: GenericEventListener<MuxPlayerElementEventMap['volumechange']>;\n  onRateChange?: GenericEventListener<MuxPlayerElementEventMap['ratechange']>;\n  onResize?: GenericEventListener<MuxPlayerElementEventMap['resize']>;\n  onWaiting?: GenericEventListener<MuxPlayerElementEventMap['waiting']>;\n  onPlay?: GenericEventListener<MuxPlayerElementEventMap['play']>;\n  onPlaying?: GenericEventListener<MuxPlayerElementEventMap['playing']>;\n  onTimeUpdate?: GenericEventListener<MuxPlayerElementEventMap['timeupdate']>;\n  onPause?: GenericEventListener<MuxPlayerElementEventMap['pause']>;\n  onSeeking?: GenericEventListener<MuxPlayerElementEventMap['seeking']>;\n  onSeeked?: GenericEventListener<MuxPlayerElementEventMap['seeked']>;\n  onStalled?: GenericEventListener<MuxPlayerElementEventMap['stalled']>;\n  onSuspend?: GenericEventListener<MuxPlayerElementEventMap['suspend']>;\n  onEnded?: GenericEventListener<MuxPlayerElementEventMap['ended']>;\n  onError?: GenericEventListener<MuxPlayerElementEventMap['error']>;\n  onCuePointChange?: GenericEventListener<MuxPlayerElementEventMap['cuepointchange']>;\n  onCuePointsChange?: GenericEventListener<MuxPlayerElementEventMap['cuepointschange']>;\n  onChapterChange?: GenericEventListener<MuxPlayerElementEventMap['chapterchange']>;\n} & Partial<MuxMediaPropTypes> &\n  Partial<VideoApiAttributes>;\n\nconst MuxPlayerInternal = React.forwardRef<MuxPlayerRefAttributes, MuxPlayerProps>(({ children, ...props }, ref) => {\n  return React.createElement('mux-player', toNativeProps({ ...props, ref }), children);\n});\n\nconst useEventCallbackEffect = <K extends keyof MuxPlayerElementEventMap>(\n  type: K,\n  ref: // | ((instance: EventTarget | null) => void)\n  React.MutableRefObject<MuxPlayerElement | null> | null | undefined,\n  callback: GenericEventListener<MuxPlayerElementEventMap[K]> | undefined\n) => {\n  return useEffect(() => {\n    const eventTarget = ref?.current;\n    if (!eventTarget || !callback) return;\n    eventTarget.addEventListener(type, callback);\n    return () => {\n      eventTarget.removeEventListener(type, callback);\n    };\n  }, [ref?.current, callback]);\n};\n\nconst usePlayer = (\n  ref: // | ((instance: EventTarget | null) => void)\n  React.MutableRefObject<MuxPlayerElement | null> | null | undefined,\n  props: MuxPlayerProps\n) => {\n  const {\n    onAbort,\n    onCanPlay,\n    onCanPlayThrough,\n    onEmptied,\n    onLoadStart,\n    onLoadedData,\n    onLoadedMetadata,\n    onProgress,\n    onDurationChange,\n    onVolumeChange,\n    onRateChange,\n    onResize,\n    onWaiting,\n    onPlay,\n    onPlaying,\n    onTimeUpdate,\n    onPause,\n    onSeeking,\n    onSeeked,\n    onStalled,\n    onSuspend,\n    onEnded,\n    onError,\n    onCuePointChange,\n    onCuePointsChange,\n    onChapterChange,\n    metadata,\n    tokens,\n    paused,\n    playbackId,\n    playbackRates,\n    currentTime,\n    themeProps,\n    extraSourceParams,\n    castCustomData,\n    _hlsConfig,\n    defaultHiddenCaptions,\n    ...remainingProps\n  } = props;\n  useObjectPropEffect('playbackRates', playbackRates, ref);\n  useObjectPropEffect('metadata', metadata, ref);\n  useObjectPropEffect('extraSourceParams', extraSourceParams, ref);\n  useObjectPropEffect('_hlsConfig', _hlsConfig, ref);\n  useObjectPropEffect('themeProps', themeProps, ref);\n  useObjectPropEffect('tokens', tokens, ref);\n  useObjectPropEffect('playbackId', playbackId, ref);\n  useObjectPropEffect('castCustomData', castCustomData, ref);\n  useObjectPropEffect('defaultHiddenCaptions', defaultHiddenCaptions, ref);\n  useObjectPropEffect(\n    'paused',\n    paused,\n    ref,\n    (playerEl: HTMLMediaElement, pausedVal?: boolean) => {\n      if (pausedVal == null) return;\n      if (pausedVal) {\n        playerEl.pause();\n      } else {\n        playerEl.play();\n      }\n    },\n    (playerEl, value, propName) => {\n      if (playerEl.hasAttribute('autoplay') && !playerEl.hasPlayed) {\n        return false;\n      }\n      return defaultHasChanged(playerEl, value, propName);\n    }\n  );\n  useObjectPropEffect('currentTime', currentTime, ref, (playerEl: HTMLMediaElement, currentTimeVal?: number) => {\n    if (currentTimeVal == null) return;\n    playerEl.currentTime = currentTimeVal;\n  });\n  useEventCallbackEffect('abort', ref, onAbort);\n  useEventCallbackEffect('canplay', ref, onCanPlay);\n  useEventCallbackEffect('canplaythrough', ref, onCanPlayThrough);\n  useEventCallbackEffect('emptied', ref, onEmptied);\n  useEventCallbackEffect('loadstart', ref, onLoadStart);\n  useEventCallbackEffect('loadeddata', ref, onLoadedData);\n  useEventCallbackEffect('loadedmetadata', ref, onLoadedMetadata);\n  useEventCallbackEffect('progress', ref, onProgress);\n  useEventCallbackEffect('durationchange', ref, onDurationChange);\n  useEventCallbackEffect('volumechange', ref, onVolumeChange);\n  useEventCallbackEffect('ratechange', ref, onRateChange);\n  useEventCallbackEffect('resize', ref, onResize);\n  useEventCallbackEffect('waiting', ref, onWaiting);\n  useEventCallbackEffect('play', ref, onPlay);\n  useEventCallbackEffect('playing', ref, onPlaying);\n  useEventCallbackEffect('timeupdate', ref, onTimeUpdate);\n  useEventCallbackEffect('pause', ref, onPause);\n  useEventCallbackEffect('seeking', ref, onSeeking);\n  useEventCallbackEffect('seeked', ref, onSeeked);\n  useEventCallbackEffect('stalled', ref, onStalled);\n  useEventCallbackEffect('suspend', ref, onSuspend);\n  useEventCallbackEffect('ended', ref, onEnded);\n  useEventCallbackEffect('error', ref, onError);\n  useEventCallbackEffect('cuepointchange', ref, onCuePointChange);\n  useEventCallbackEffect('cuepointschange', ref, onCuePointsChange);\n  useEventCallbackEffect('chapterchange', ref, onChapterChange);\n  return [remainingProps];\n};\n\nexport const playerSoftwareVersion = getPlayerVersion();\nexport const playerSoftwareName = 'mux-player-react';\n\nconst MuxPlayer = React.forwardRef<\n  MuxPlayerRefAttributes,\n  Omit<MuxPlayerProps, 'playerSoftwareVersion' | 'playerSoftwareName'>\n>((props, ref) => {\n  const innerPlayerRef = useRef<MuxPlayerElement>(null);\n  const playerRef = useCombinedRefs(innerPlayerRef, ref);\n  const [remainingProps] = usePlayer(innerPlayerRef, props);\n  const [playerInitTime] = useState(props.playerInitTime ?? generatePlayerInitTime());\n\n  return (\n    <MuxPlayerInternal\n      /** @TODO Fix types relationships (CJP) */\n      ref={playerRef as typeof innerPlayerRef}\n      playerSoftwareName={playerSoftwareName}\n      playerSoftwareVersion={playerSoftwareVersion}\n      playerInitTime={playerInitTime}\n      {...remainingProps}\n    />\n  );\n});\n\nexport default MuxPlayer;\n","import { useEffect, useRef } from 'react';\nimport type { MutableRefObject, ForwardedRef } from 'react';\n\ntype Maybe<T> = T | null | undefined;\ntype RefCb<T> = (instance: Maybe<T>) => void;\ntype RefObj<T> = MutableRefObject<Maybe<T>>;\ntype RefTypes<T> = RefObj<T> | RefCb<T> | ForwardedRef<T>;\ninterface useCombinedRefs {\n  <T>(...refs: Maybe<RefTypes<T>>[]): RefObj<T>;\n}\n\nexport const useCombinedRefs: useCombinedRefs = (...refs) => {\n  const targetRef = useRef(null);\n\n  useEffect(() => {\n    refs.forEach((ref) => {\n      if (!ref) return;\n\n      if (typeof ref === 'function') {\n        ref(targetRef.current);\n      } else {\n        ref.current = targetRef.current;\n      }\n    });\n  }, [refs]);\n\n  return targetRef;\n};\n\n// TS assumed default export was interface def instead of function value (CJP)\nconst defaultUseCombinedRefs = useCombinedRefs;\nexport default defaultUseCombinedRefs;\n"],"names":["m","parseInt","X","p","className","classname","htmlFor","crossOrigin","viewBox","playsInline","autoPlay","playbackRate","E","e","arguments","length","undefined","Object","entries","reduce","n","_ref","t","o","r","toNativeAttrName","isKeyOf","B","ee","test","replace","toLowerCase","ne","te","s","toNativeAttrValue","ae","se","prototype","hasOwnProperty","c","defaultHasChanged","shallowEqual","is","Array","isArray","some","keys","call","le","ue","defaultUpdateValue","i","ie","current","ce","getEnvPlayerVersion","de","Me","d","_ref2","children","ref","a","useEventCallbackEffect","pe","addEventListener","removeEventListener","Pe","be","Ue","y","ge","_len","_key","oe","re","forEach","g","usePlayer","onAbort","onCanPlay","onCanPlayThrough","onEmptied","onLoadStart","onLoadedData","f","onLoadedMetadata","P","onProgress","b","onDurationChange","v","onVolumeChange","x","onRateChange","T","onResize","h","onWaiting","R","onPlay","C","onPlaying","k","onTimeUpdate","L","onPause","S","onSeeking","O","onSeeked","G","onStalled","w","onSuspend","V","onEnded","I","onError","A","onCuePointChange","N","onCuePointsChange","D","onChapterChange","_","metadata","K","tokens","H","paused","U","playbackId","j","playbackRates","W","currentTime","z","themeProps","F","extraSourceParams","Z","castCustomData","q","_hlsConfig","J","defaultHiddenCaptions","Y","$","l","u","pause","play","Q","hasAttribute","hasPlayed","fe","me","playerInitTime","Ee","playerSoftwareName","playerSoftwareVersion"],"sourceRoot":""}