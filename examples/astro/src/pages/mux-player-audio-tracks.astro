---
import Layout from '../layouts/Layout.astro';
import { MuxPlayer } from '@mux/mux-player-astro';
---

<Layout>
  <MuxPlayer
    style={{
      display: 'block',
      aspectRatio: '16/9',
    }}
    autoplay={true}
    muted
    playback-id="ihZa7qP1zY8oyLSQW9TS602VgwQvNdyIvlk9LInEGU2s"
    metadata={{
      video_title: 'Elephants Dream',
    }}
    streamType="on-demand"
    proudlyDisplayMuxBadge
  />

  <MuxPlayer id="muxPlayer" streamType="on-demand" playbackId="ihZa7qP1zY8oyLSQW9TS602VgwQvNdyIvlk9LInEGU2s" />

  <br />

  <select id="audioselect"></select>
  <input id="qualityplaying" value="N/A" readonly size="5" />
</Layout>

<script>
  import type { MuxPlayerElement } from '@mux/mux-player-astro';
  const muxPlayer = document.getElementById('muxPlayer') as MuxPlayerElement;
  const qualityplaying = document.getElementById('qualityplaying') as HTMLInputElement;
  const audioselect = document.getElementById('audioselect') as HTMLSelectElement;
  muxPlayer.addEventListener('resize', () => {
    qualityplaying.value = `${Math.min(muxPlayer.videoWidth, muxPlayer.videoHeight)}p`;
  });

  muxPlayer.audioTracks.addEventListener('removetrack', ({ track }: any) => {
    audioselect.querySelector(`[value="${track.id}"]`)!.remove();
  });

  muxPlayer.audioTracks.addEventListener('addtrack', ({ track }: any) => {
    audioselect.append(new Option(track.label, track.id, track.enabled, track.enabled));
  });

  audioselect.addEventListener('change', () => {
    for (let track of muxPlayer.audioTracks) {
      track.enabled = audioselect.value == track.id;
    }
  });
</script>
