{
  "version": 3,
  "sources": ["../src/index.tsx", "../src/use-combined-refs.ts", "../src/env.ts"],
  "sourcesContent": ["'use client';\n\nimport { useCombinedRefs } from './use-combined-refs';\nimport React, { useEffect, useRef, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport {\n  allMediaTypes,\n  initialize,\n  teardown,\n  MuxMediaProps,\n  StreamTypes,\n  PlaybackTypes,\n  toMuxVideoURL,\n  generatePlayerInitTime,\n  CmcdTypes,\n} from '@mux/playback-core';\nimport type { PlaybackCore } from '@mux/playback-core';\nimport { getPlayerVersion } from './env';\n\nexport type Props = Omit<\n  React.DetailedHTMLProps<React.VideoHTMLAttributes<HTMLVideoElement>, HTMLVideoElement>,\n  'autoPlay'\n> &\n  MuxMediaProps;\n\nexport const playerSoftwareVersion = getPlayerVersion();\nexport const playerSoftwareName = 'mux-video-react';\nexport { generatePlayerInitTime };\n\nconst MuxVideo = React.forwardRef<HTMLVideoElement | undefined, Partial<Props>>((props, ref) => {\n  const {\n    playbackId,\n    src: outerSrc,\n    children,\n    autoPlay,\n    preload,\n    tokens,\n    playbackToken,\n    drmToken,\n    ...restProps\n  } = props;\n\n  const nativeVideoProps = Object.fromEntries(\n    Object.entries(restProps).filter(([key]) => !Object.keys(MuxVideo.propTypes as any).includes(key))\n  );\n\n  const [playerInitTime] = useState(props.playerInitTime ?? generatePlayerInitTime());\n  const [src, setSrc] = useState<MuxMediaProps['src']>(toMuxVideoURL(props) ?? outerSrc);\n  const playbackCoreRef = useRef<PlaybackCore | undefined>(undefined);\n  const innerMediaElRef = useRef<HTMLVideoElement>(null);\n  const mediaElRef = useCombinedRefs(innerMediaElRef, ref);\n\n  useEffect(() => {\n    setSrc(toMuxVideoURL(props) ?? outerSrc);\n  }, [outerSrc, playbackId]);\n\n  useEffect(() => {\n    const propsWithState = {\n      // NOTE: Applying playerInitTime first as a simple way of overriding it if/when folks update\n      // the value via props after initial load (e.g. when swapping src)\n      playerInitTime,\n      ...props,\n      src,\n      playerSoftwareName,\n      playerSoftwareVersion,\n      autoplay: autoPlay,\n    };\n\n    // mediaEl required caching here so the ref was not null in the unmount callback.\n    let mediaEl = mediaElRef.current;\n    if (mediaEl) {\n      playbackCoreRef.current = initialize(propsWithState, mediaEl, playbackCoreRef.current);\n    }\n\n    return () => {\n      teardown(mediaEl, playbackCoreRef.current);\n      mediaEl = undefined;\n      playbackCoreRef.current = undefined;\n    };\n  }, [src]);\n\n  useEffect(() => {\n    playbackCoreRef.current?.setAutoplay(autoPlay);\n  }, [autoPlay]);\n\n  useEffect(() => {\n    playbackCoreRef.current?.setPreload(preload);\n  }, [preload]);\n\n  return (\n    /** @TODO Fix types relationships (CJP) */\n    <video ref={mediaElRef as typeof innerMediaElRef} {...nativeVideoProps}>\n      {children}\n    </video>\n  );\n});\n\nMuxVideo.propTypes = {\n  _hlsConfig: PropTypes.any,\n  beaconCollectionDomain: PropTypes.string,\n  customDomain: PropTypes.string,\n  debug: PropTypes.bool,\n  disableCookies: PropTypes.bool,\n  disableTracking: PropTypes.bool,\n  drmToken: PropTypes.string,\n  envKey: PropTypes.string,\n  errorTranslator: PropTypes.func,\n  liveEdgeStart: PropTypes.number,\n  maxResolution: PropTypes.oneOf(['720p', '1080p', '1440p', '2160p']),\n  metadata: PropTypes.any,\n  minResolution: PropTypes.oneOf(['480p', '540p', '720p', '1080p', '1440p', '2160p']),\n  playbackId: PropTypes.string,\n  playbackToken: PropTypes.string,\n  playerInitTime: PropTypes.number,\n  preferCmcd: PropTypes.oneOf(Object.values(CmcdTypes)),\n  preferPlayback: PropTypes.oneOf(Object.values(PlaybackTypes)),\n  programStartTime: PropTypes.number,\n  programEndTime: PropTypes.number,\n  assetStartTime: PropTypes.number,\n  assetEndTime: PropTypes.number,\n  renditionOrder: PropTypes.oneOf(['desc']),\n  startTime: PropTypes.number,\n  streamType: PropTypes.oneOf(Object.values(StreamTypes)),\n  targetLiveWindow: PropTypes.number,\n  tokens: PropTypes.object,\n  type: PropTypes.oneOf(allMediaTypes),\n};\n\nexport default MuxVideo;\n", "'use client';\nimport { useEffect, useRef, MutableRefObject } from 'react';\n\ntype Maybe<T> = T | null | undefined;\ntype RefCb<T> = (instance: Maybe<T>) => void;\ntype RefObj<T> = MutableRefObject<Maybe<T>>;\ntype RefTypes<T> = RefObj<T> | RefCb<T>;\ninterface useCombinedRefs {\n  <T>(...refs: Maybe<RefTypes<T>>[]): RefObj<T>;\n}\n\nexport const useCombinedRefs: useCombinedRefs = (...refs) => {\n  const targetRef = useRef(null);\n\n  useEffect(() => {\n    refs.forEach((ref) => {\n      if (!ref) return;\n\n      if (typeof ref === 'function') {\n        ref(targetRef.current);\n      } else {\n        ref.current = targetRef.current;\n      }\n    });\n  }, [refs]);\n\n  return targetRef;\n};\n\n// TS assumed default export was interface def instead of function value (CJP)\nconst defaultUseCombinedRefs = useCombinedRefs;\nexport default defaultUseCombinedRefs;\n", "export const isMaybeBrowser = () => typeof window != 'undefined';\n// @ts-ignore\nexport const isMaybeServer = () => typeof global != 'undefined';\n\nconst getEnvPlayerVersion = () => {\n  try {\n    // @ts-ignore\n    return PLAYER_VERSION as string;\n  } catch {}\n  return 'UNKNOWN';\n};\n\nconst player_version: string = getEnvPlayerVersion();\n\nexport const getPlayerVersion = () => player_version;\n"],
  "mappings": "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",
  "names": ["index_exports", "__export", "index_default", "playerSoftwareName", "playerSoftwareVersion", "__toCommonJS", "import_react", "useCombinedRefs", "refs", "targetRef", "ref", "import_react", "import_prop_types", "import_playback_core", "getEnvPlayerVersion", "player_version", "getPlayerVersion", "playerSoftwareVersion", "getPlayerVersion", "playerSoftwareName", "MuxVideo", "React", "props", "ref", "_a", "_b", "playbackId", "outerSrc", "children", "autoPlay", "preload", "tokens", "playbackToken", "drmToken", "restProps", "nativeVideoProps", "key", "playerInitTime", "src", "setSrc", "playbackCoreRef", "innerMediaElRef", "mediaElRef", "useCombinedRefs", "propsWithState", "playerSoftwareName", "playerSoftwareVersion", "mediaEl", "PropTypes", "index_default"]
}
